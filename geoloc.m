(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



(* Initialization *)
Needs ["JLink`"]
(* Load Java functionality *)
If[JavaLink[] === Null, InstallJava[];];
LoadJavaClass["java.net.URLEncoder"];

(* Private API key from google *)
$key = "AIzaSyBufb92UiWaK5WRqZF_PeUloidrgn4OUw8";

ToWebString[s_String] := URLEncoder`encode[s, "UTF-8"]

iapi[address_String, key_String] := 
 "https://maps.googleapis.com/maps/api/geocode/json?address=" <> 
  ToWebString[address] <> "&key=" <> key
  
api[address_String] :=
	With[{res = {"lat", "lng"} /. ("location" /. ("geometry" /. ("results" /. 
		ImportString[Import[iapi[address, $key], "String"], "JSon"])))},
		Switch[res,{{_Real, _Real}}, First@res, _, Missing["NotAvailable"]]
	]


(* Transfer Command line args to script variable *)
args = $ScriptCommandLine;


(* If $ScriptCommandLine is completely blank, the script/notebook is being debugged in Mathematica *)
If[Length[$ScriptCommandLine]==0,
	args={"plotaddress"};
	(* Set up a debug Command Line *)
	AppendTo[args,NotebookDirectory[]<>"test/address1.csv"];
	AppendTo[args,NotebookDirectory[]<>"test/address2.csv"];
	(* AppendTo[args,"colour={Blue,Green}"]; *)
	(* AppendTo[args,"legend={Personal,Work}"]; *)
	(* AppendTo[args,NotebookDirectory[]<>"test/address.csv"]; *)
,
	Nothing
]


If[Length[args]==1,
	Print["USAGE: geoloc file1 [file2...]"]
	Exit[]
,
	Nothing;
]

(* Parse the command line *)
flist={};
AppendTo[flist,#]& /@ Rest[args];
Print["Command Line Parsed"]


(* Define function to read input addresses *)
doReadAddr[ifile_] := 
Switch[FileExtension[ifile],
	"csv",Import[ifile],
	"xls",Import[ifile,{"data",1}],
	"xlsx",Import[ifile,{"data",1}],
	_,Nothing
]

(* Read files from the command line *)
tblInput = doReadAddr /@ flist;


If[MemberQ[tblInput,$Failed],
	Print["One or more files specified do not exist"];
	Exit[1]
,
	Print["Input files Read"]
]



(* Define Function to geolocate adress list *)
doGeoLookup[input_] := Module[{colAddresses, colLocations, tmp, hold, lookup},
	(* Split file into records that need geolocation andd those that dont *)
	(* Assum that if the record is 7 elements long it has geoloc information *)
	hold = Select[input, Length[#] > 5 &];
	lookup = Select[input, Length[#] <= 5 &];
	(* seperate the list into tables of rows with geoposition and those without *)
	(* Merge address components into a single string *)
	colAddresses = StringJoin[Riffle[#, " "]] & /@ lookup;
	(* Geolocate the address on Google *)
	colLocations = api[#] & /@ colAddresses;
	(* flip the table to add the latitude and longitude as rows *)
	tmp = Transpose[lookup];
	tmp = Append[tmp, First@# & /@ colLocations]; 
	tmp = Append[tmp, Last@# & /@ colLocations];
	(* Flip the table back to restore columnar format *)
	tmp = Transpose[tmp];
	tmp \[Union] hold
]

(* Geolocate Addresses from Google Maps *)

tblOutput = doGeoLookup[#]& /@ tblInput;
Print["Address lookup from Google Complete"]


(* Save Updated Information *)
MapThread[Export,{flist,tblOutput}];
Print["Files updated"]
